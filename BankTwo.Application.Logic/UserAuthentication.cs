using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security;
using System.Web;
using ViewModels;
using BankTwo.Application.Core.Entities;
using BankTwo.Application.Data.InterfaceClasses;
using BankTwo.Application.Data.ConcreteClasses;
using AutoMapper;
using Microsoft.AspNet.Identity.EntityFramework;
using BankTwo.Application.Data;

namespace BankTwo.Application.Logic
{
    public class UserAuthentication
    {
        IApplicationUser _user;
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;
        public ApplicationUser user;
  
        public UserAuthentication(ApplicationUserManager userManager, ApplicationSignInManager signInManager)
        {
            _signInManager = signInManager;
            _userManager = userManager;
            // Replace This Using dependency Injection 
            _user = new ApplicationUserDB();
        }
        #region Managers
        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.Current.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set
            {
                _signInManager = value;
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.Current.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.Current.GetOwinContext().Authentication;
            }
        }
        #endregion
        public async Task<SignInStatus> LogInLogic(LoginViewModel model)
        {

            return await SignInManager.PasswordSignInAsync(model.UserName, model.Password, model.RememberMe, shouldLockout: false);
        }


        public async Task<IdentityResult> RegisterLogic(RegisterViewModel model)
        {
            user = new ApplicationUser
            {
                FirstName = model.FirstName,
                LastName = model.LastName,
                OtherNames = model.OtherNames,
                UserName = model.UserName,
                Email = model.Email,
                BranchId = model.BranchId,
                PhoneNumber = model.PhoneNumber,
                UserRole = model.UserRole
            };
            string autoGeneratedPassword = Utilities.AutoGeneratePassword.AutoGenerateUserPassword(model);
            Utilities.SendEmail sendUserPassword = new Utilities.SendEmail();
            bool emailCheck = sendUserPassword.SendPasswordViaEmail(model.Email,model.UserName,autoGeneratedPassword);
            if (emailCheck)
            {
                var result = await UserManager.CreateAsync(user, autoGeneratedPassword);
                await UserManager.AddToRoleAsync(user.Id, model.UserRole);
                return result;
            }
            return IdentityResult.Failed();
            
        }

       

        public IEnumerable<RegisterViewModel> UsersDisplay()
        {
            IEnumerable<RegisterViewModel> editUserViewModels;
            var users = _user.RetrieveAllFromDB();
            if (users != null)
            {
               editUserViewModels = users.Select(Mapper.Map<ApplicationUser,RegisterViewModel>).ToList();
                return editUserViewModels;
            }
            return null;
        }
        public RegisterViewModel RetrieveUser(string id)
        {
            var retrievedUser = _user.RetrieveById(id);
            if (retrievedUser == null)
            {
                return null;
            }
            var userViewModel = Mapper.Map<ApplicationUser, RegisterViewModel>(retrievedUser);
            return userViewModel;
        }
        public RegisterViewModel RetrieveUserById(string id)
        {
            string Id = Utilities.Encrypt.Decode(id);
            var retrievedUser = _user.RetrieveById(Id);
            if (retrievedUser == null)
            {
                return null;
            }
            var userViewModel = Mapper.Map<ApplicationUser, RegisterViewModel>(retrievedUser);
            return userViewModel; 
        }

        public async Task<bool> EditUser(RegisterViewModel registerViewModel)
        {
            string id = Utilities.Encrypt.Decode(registerViewModel.EncryptedId);
            var userToUpdate = _user.RetrieveById(id);
            //Manual Mapping
            userToUpdate.FirstName = registerViewModel.FirstName;
            userToUpdate.LastName = registerViewModel.LastName;
            userToUpdate.OtherNames = registerViewModel.OtherNames;
            userToUpdate.Email = registerViewModel.Email;
            userToUpdate.PhoneNumber = registerViewModel.PhoneNumber;
            userToUpdate.BranchId = registerViewModel.BranchId;

            return await _user.UpdateDB(userToUpdate);
        }

        public async Task<bool> DeleteUser(string id)
        {
            string Id = Utilities.Encrypt.Decode(id);
             return await _user.DeleteFromDB(Id);
        }
        public async Task SignInUser(string userRole)
        {
           // await UserManager.AddToRoleAsync(user.Id, userRole);
            await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);

        }
        public void LogOff()
        {
            AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie);
        }
        public bool HasPassword(string userId)
        {
            var user = UserManager.FindById(userId);
            if (user != null)
            {
                return user.PasswordHash != null;
            }
            return false;
        }
        public Task<bool> ChangeRoleToTeller(TellerRoleViewModel tellerRole)
        {

            var user = _user.RetrieveById(tellerRole.UserId);
            var oldRoleId = user.Roles.SingleOrDefault(m => m.UserId == user.Id).RoleId;//
            var oldRoleName = _user.RetrieveRoleName(oldRoleId);
            _userManager.RemoveFromRole(user.Id, oldRoleName);
            _userManager.AddToRole(user.Id,"Teller");
            user.GLAccountId = tellerRole.GLAccountId;
            return _user.UpdateDB(user);
           
        }
        public List<String> RetrieveUserNames()
        {
            return _user.RetrieveUserNames();
        }

        #region userManagement
        public async Task<IdentityResult> ChangePassword(string userId, ChangePasswordViewModel model) {

            return await UserManager.ChangePasswordAsync(userId, model.OldPassword, model.NewPassword);
        }
        public async Task FindAndVerify(string userId)
        {
            var user = await UserManager.FindByIdAsync(userId);
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }

        }
        public bool HasPhoneNumber(string userId)
        {
            var user = UserManager.FindById(userId);
            if (user != null)
            {
                return user.PhoneNumber != null;
            }
            return false;
        }
        public async Task<string> GetPhoneNumber(string userId)
        {
            return await UserManager.GetPhoneNumberAsync(userId);
        }

        #endregion
        public void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (_userManager != null)
                {
                    _userManager.Dispose();
                    _userManager = null;
                }

                if (_signInManager != null)
                {
                    _signInManager.Dispose();
                    _signInManager = null;
                }
            }
        }
    
    }
}
